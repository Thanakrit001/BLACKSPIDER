local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"

-- --- เริ่มต้นส่วนการโหลดไลบรารีที่ปรับปรุงแล้ว ---
local Library
local ThemeManager
local SaveManager

local success, err = pcall(function()
    local libCode = game:HttpGet(repo .. "Library.lua")
    Library = loadstring(libCode)()
    
    local themeCode = game:HttpGet(repo .. "addons/ThemeManager.lua")
    ThemeManager = loadstring(themeCode)()
    
    local saveCode = game:HttpGet(repo .. "addons/SaveManager.lua")
    SaveManager = loadstring(saveCode)()
end)

if not success then
    warn("Failed to load one or more libraries:", err)
    return -- หยุดการทำงานของสคริปต์ทั้งหมด
end
-- --- สิ้นสุดส่วนการโหลดไลบรารีที่ปรับปรุงแล้ว ---

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "BLACKSPIDER",
    Footer = "version: example",
    Icon = 131071604680337,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Main", "user"),
    Shop = Window:AddTab("Shop", "shopping_cart"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox("Groupbox", "boxes")

LeftGroupBox:AddToggle("MyToggle", {
    Text = "This is a toggle",
    Tooltip = "This is a tooltip",
    DisabledTooltip = "I am disabled!",
    Default = true,
    Disabled = false,
    Visible = true,
    Risky = false,
    Callback = function(Value)
        print("[cb] MyToggle changed to:", Value)
    end,
})

Toggles.MyToggle:OnChanged(function()
    print("MyToggle changed to:", Toggles.MyToggle.Value)
end)

Toggles.MyToggle:SetValue(false)

Library:OnUnload(function()
    print("Unloaded!")
end)

---
local ShopGroupBox = Tabs.Shop:AddLeftGroupbox("Seed Shop Event", "box")
local GearShopGroupBox = Tabs.Shop:AddLeftGroupbox("Gear Shop Event", "box") -- เพิ่ม Groupbox สำหรับ Gear Shop

local autoBuyLowLevelSeedsCoroutine = nil
local autoBuyHighLevelSeedsCoroutine = nil 
local autoBuyAllSeedsCoroutine = nil 
local autoBuyAllGearCoroutine = nil -- เพิ่มตัวแปรสำหรับ Coroutine ของการซื้อเกียร์ทั้งหมด

ShopGroupBox:AddToggle("AutoBuyItemA", {
    Text = "ออโต้ซื้อเมล็ดระดับต่ำ (FLASH SPEED)",
    Tooltip = "Automatically buys Item A at maximum speed. EXTREME RISK OF DETECTION!",
    Default = false,
    Callback = function(Value)
        print("[cb] Auto-Buy Item A changed to:", Value)
        if Value then
            Library:Notify({
                Title = "Shop",
                Description = "Auto-Buy Item A ENABLED! Activating FLASH SPEED (EXTREME RISK)...",
                Time = 3,
            })
            
            autoBuyLowLevelSeedsCoroutine = task.spawn(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local BuySeedStockEvent = nil
                local successEvent, eventResult = pcall(function()
                    BuySeedStockEvent = ReplicatedStorage:WaitForChild("GameEvents", 10):WaitForChild("BuySeedStock", 10)
                end)

                if not successEvent or not BuySeedStockEvent then
                    warn("Failed to find BuySeedStock event. Auto-buy stopped.")
                    Library:Notify({
                        Title = "Error",
                        Description = "Failed to find buy event. Auto-buy stopped.",
                        Time = 5,
                    })
                    Toggles.AutoBuyItemA:SetValue(false)
                    return
                end

                local seedsToBuy = {
                    "Carrot", "Strawberry", "Blueberry", "Tomato", "Cauliflower",
                    "Watermelon", "Green Apple", "Avocado", "Banana"
                }

                while Toggles.AutoBuyItemA.Value do
                    for _, seedName in ipairs(seedsToBuy) do
                        if not Toggles.AutoBuyItemA.Value then break end 
                        
                        if BuySeedStockEvent and BuySeedStockEvent.Parent then
                            pcall(BuySeedStockEvent.FireServer, BuySeedStockEvent, seedName)
                        else
                            warn("BuySeedStock event no longer exists. Stopping auto-buy.")
                            Toggles.AutoBuyItemA:SetValue(false)
                            break
                        end
                        task.wait(0) 
                    end
                    task.wait(0) 
                end
                print("Auto-buy low level seeds stopped.")
            end)

        else
            Library:Notify({
                Title = "Shop",
                Description = "Auto-Buy Item A DISABLED!",
                Time = 3,
            })
        end
    end,
})

ShopGroupBox:AddToggle("AutoBuyItemB", {
    Text = "ออโต้ซื้อเมล็ดระดับสูง (FLASH SPEED)",
    Tooltip = "Automatically buys high-level seeds at maximum speed. EXTREME RISK OF DETECTION!",
    Default = false,
    Callback = function(Value)
        print("[cb] Auto-Buy Item B changed to:", Value)
        if Value then
            Library:Notify({
                Title = "Shop",
                Description = "Auto-Buy Item B ENABLED! Activating FLASH SPEED (EXTREME RISK)...",
                Time = 3,
            })
            
            autoBuyHighLevelSeedsCoroutine = task.spawn(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local BuySeedStockEvent = nil
                local successEvent, eventResult = pcall(function()
                    BuySeedStockEvent = ReplicatedStorage:WaitForChild("GameEvents", 10):WaitForChild("BuySeedStock", 10)
                end)

                if not successEvent or not BuySeedStockEvent then
                    warn("Failed to find BuySeedStock event for high-level seeds. Auto-buy stopped.")
                    Library:Notify({
                        Title = "Error",
                        Description = "Failed to find buy event for high-level seeds. Auto-buy stopped.",
                        Time = 5,
                    })
                    Toggles.AutoBuyItemB:SetValue(false)
                    return
                end

                local highLevelSeedsToBuy = {
                    "Pineapple", "Kiwi", "Bell Pepper", "Prickly Pear", 
                    "Loquat", "Feijoa", "Sugar Apple"
                }

                while Toggles.AutoBuyItemB.Value do 
                    for _, seedName in ipairs(highLevelSeedsToBuy) do
                        if not Toggles.AutoBuyItemB.Value then break end 
                        
                        if BuySeedStockEvent and BuySeedStockEvent.Parent then
                            pcall(BuySeedStockEvent.FireServer, BuySeedStockEvent, seedName)
                        else
                            warn("BuySeedStock event no longer exists for high-level seeds. Stopping auto-buy.")
                            Toggles.AutoBuyItemB:SetValue(false)
                            break
                        end
                        task.wait(0) 
                    end
                    task.wait(0) 
                end
                print("Auto-buy high level seeds stopped.")
            end)

        else
            Library:Notify({
                Title = "Shop",
                Description = "Auto-Buy Item B DISABLED!",
                Time = 3,
            })
        end
    end,
})

ShopGroupBox:AddToggle("AutoBuyAllSeeds", {
    Text = "ออโต้ซื้อทุกเมล็ด (FLASH SPEED)",
    Tooltip = "Automatically buys all known seeds at maximum speed. EXTREME RISK OF DETECTION!",
    Default = false,
    Callback = function(Value)
        print("[cb] Auto-Buy All Seeds changed to:", Value)
        if Value then
            Library:Notify({
                Title = "Shop",
                Description = "Auto-Buy All Seeds ENABLED! Activating FLASH SPEED (EXTREME RISK)...",
                Time = 3,
            })
            
            autoBuyAllSeedsCoroutine = task.spawn(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local BuySeedStockEvent = nil
                local successEvent, eventResult = pcall(function()
                    BuySeedStockEvent = ReplicatedStorage:WaitForChild("GameEvents", 10):WaitForChild("BuySeedStock", 10)
                end)

                if not successEvent or not BuySeedStockEvent then
                    warn("Failed to find BuySeedStock event for all seeds. Auto-buy stopped.")
                    Library:Notify({
                        Title = "Error",
                        Description = "Failed to find buy event for all seeds. Auto-buy stopped.",
                        Time = 5,
                    })
                    Toggles.AutoBuyAllSeeds:SetValue(false)
                    return
                end

                local allSeedsToBuy = {
                    "Carrot", "Strawberry", "Blueberry", "Tomato", "Cauliflower",
                    "Watermelon", "Green Apple", "Avocado", "Banana",
                    "Pineapple", "Kiwi", "Bell Pepper", "Prickly Pear", 
                    "Loquat", "Feijoa", "Sugar Apple"
                }

                while Toggles.AutoBuyAllSeeds.Value do
                    for _, seedName in ipairs(allSeedsToBuy) do
                        if not Toggles.AutoBuyAllSeeds.Value then break end 
                        
                        if BuySeedStockEvent and BuySeedStockEvent.Parent then
                            pcall(BuySeedStockEvent.FireServer, BuySeedStockEvent, seedName)
                        else
                            warn("BuySeedStock event no longer exists for all seeds. Stopping auto-buy.")
                            Toggles.AutoBuyAllSeeds:SetValue(false)
                            break
                        end
                        task.wait(0) 
                    end
                    task.wait(0) 
                end
                print("Auto-buy all seeds stopped.")
            end)

        else
            Library:Notify({
                Title = "Shop",
                Description = "Auto-Buy All Seeds DISABLED!",
                Time = 3,
            })
        end
    end,
})

--- เพิ่ม Toggle ใหม่สำหรับซื้อเกียร์ทั้งหมด ---
GearShopGroupBox:AddToggle("AutoBuyAllGear", {
    Text = "ออโต้ซื้อเกียร์ทั้งหมด (FLASH SPEED)",
    Tooltip = "Automatically buys all known gear at maximum speed. EXTREME RISK OF DETECTION!",
    Default = false,
    Callback = function(Value)
        print("[cb] Auto-Buy All Gear changed to:", Value)
        if Value then
            Library:Notify({
                Title = "Shop",
                Description = "Auto-Buy All Gear ENABLED! Activating FLASH SPEED (EXTREME RISK)...",
                Time = 3,
            })
            
            autoBuyAllGearCoroutine = task.spawn(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local BuyGearStockEvent = nil
                local successEvent, eventResult = pcall(function()
                    -- รอ Event "BuyGearStock"
                    BuyGearStockEvent = ReplicatedStorage:WaitForChild("GameEvents", 10):WaitForChild("BuyGearStock", 10)
                end)

                if not successEvent or not BuyGearStockEvent then
                    warn("Failed to find BuyGearStock event. Auto-buy stopped.")
                    Library:Notify({
                        Title = "Error",
                        Description = "Failed to find buy gear event. Auto-buy stopped.",
                        Time = 5,
                    })
                    Toggles.AutoBuyAllGear:SetValue(false)
                    return
                end

                local allGearToBuy = {
                    "Watering Can", "Trowel", "Recall Wrench", "Basic Sprinkler",
                    "Advanced Sprinkler", "Godly Sprinkler", "Tanning Mirror",
                    "Master Sprinkler", "Cleaning Spray"
                }

                while Toggles.AutoBuyAllGear.Value do
                    for _, gearName in ipairs(allGearToBuy) do
                        if not Toggles.AutoBuyAllGear.Value then break end 
                        
                        if BuyGearStockEvent and BuyGearStockEvent.Parent then
                            pcall(BuyGearStockEvent.FireServer, BuyGearStockEvent, gearName)
                        else
                            warn("BuyGearStock event no longer exists. Stopping auto-buy.")
                            Toggles.AutoBuyAllGear:SetValue(false)
                            break
                        end
                        task.wait(0) 
                    end
                    task.wait(0) 
                end
                print("Auto-buy all gear stopped.")
            end)

        else
            Library:Notify({
                Title = "Shop",
                Description = "Auto-Buy All Gear DISABLED!",
                Time = 3,
            })
        end
    end,
})
--- สิ้นสุด Toggle ใหม่สำหรับซื้อเกียร์ทั้งหมด ---

---
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")

MenuGroup:AddToggle("KeybindMenuOpen", {
    Default = Library.KeybindFrame.Visible,
    Text = "Open Keybind Menu",
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
    Text = "Custom Cursor",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
    :AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place")

SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"]) 

SaveManager:LoadAutoloadConfig()


---
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local toggleGui = Instance.new("ScreenGui")
toggleGui.Name = "ToggleUIBtnGui"
toggleGui.ResetOnSpawn = false
toggleGui.Parent = playerGui

local toggleButton = Instance.new("ImageButton")
toggleButton.Name = "ToggleButton"
toggleButton.Parent = toggleGui
toggleButton.Size = UDim2.new(0, 50, 0, 50)
toggleButton.Position = UDim2.new(0.95, -50, 0.05, 0)
toggleButton.BackgroundTransparency = 1
toggleButton.Image = "rbxassetid://131071604680337"
toggleButton.ImageTransparency = 0
toggleButton.ZIndex = 10

local uiCorner = Instance.new("UICorner")
uiCorner.Parent = toggleButton
uiCorner.CornerRadius = UDim.new(0, 8)

toggleButton.MouseButton1Click:Connect(function()
    Window:Toggle()
end)

Window:OnVisibilityChanged(function(isVisible)
    toggleButton.Visible = not isVisible
end)

toggleButton.Visible = not Window.Visible

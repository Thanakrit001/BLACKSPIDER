local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
	Title = "BLACKSPIDER",
	Footer = "version: beta",
	Icon = 131071604680337,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

local Tabs = {
	Main = Window:AddTab("Main", "user"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local DispenserGroup = Tabs.Main:AddLeftGroupbox("Dispensers", "box")

local BoosterGroup = Tabs.Main:AddRightGroupbox("Boosters", "package")

local MemoryMatchGroup = Tabs.Main:AddLeftGroupbox("Memory Matches", "puzzle")

local allDispensers = {}
local allBoosters = {}
local allMemoryMatches = {}

local function fireToyEvent(itemName, value)
    if value then
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ToyEvent"):FireServer(itemName)
    end
end

local function addDispenserBoosterToggle(groupbox, name, targetTable, defaultState)
    local toggle = groupbox:AddToggle(name:gsub(" ", ""), {
        Text = name,
        Default = defaultState or false,
        Tooltip = "Toggles " .. name .. " event.",
        Callback = function(value)
            fireToyEvent(name, value)
        end,
    })
    table.insert(targetTable, toggle)
    return toggle
end

addDispenserBoosterToggle(DispenserGroup, "Honey Dispenser", allDispensers)
addDispenserBoosterToggle(DispenserGroup, "Free Ant Pass Dispenser", allDispensers)
addDispenserBoosterToggle(DispenserGroup, "Blueberry Dispenser", allDispensers)
addDispenserBoosterToggle(DispenserGroup, "Coconut Dispenser", allDispensers)
addDispenserBoosterToggle(DispenserGroup, "Glue Dispenser", allDispensers)
addDispenserBoosterToggle(DispenserGroup, "Strawberry Dispenser", allDispensers)
addDispenserBoosterToggle(DispenserGroup, "Treat Dispenser", allDispensers)
addDispenserBoosterToggle(DispenserGroup, "Wealth Clock", allDispensers)

DispenserGroup:AddToggle("ToggleAllDispensers", {
    Text = "Toggle All Dispensers",
    Default = false,
    Tooltip = "Toggles all individual Dispenser options ON or OFF.",
    Callback = function(value)
        for _, toggle in ipairs(allDispensers) do
            if toggle.Value ~= value then
                toggle:SetValue(value)
            end
        end
    end,
})

addDispenserBoosterToggle(BoosterGroup, "Sprout Summoner", allBoosters)
addDispenserBoosterToggle(BoosterGroup, "Honeystorm", allBoosters)
addDispenserBoosterToggle(BoosterGroup, "Blue Field Booster", allBoosters)
addDispenserBoosterToggle(BoosterGroup, "Field Booster", allBoosters)
addDispenserBoosterToggle(BoosterGroup, "Red Field Booster", allBoosters)

BoosterGroup:AddToggle("ToggleAllBoosters", {
    Text = "Toggle All Boosters",
    Default = false,
    Tooltip = "Toggles all individual Booster options ON or OFF.",
    Callback = function(value)
        for _, toggle in ipairs(allBoosters) do
            if toggle.Value ~= value then
                toggle:SetValue(value)
            end
        end
    end,
})

-- เพิ่ม "Memory Match" ธรรมดาเข้าไปด้วย
addDispenserBoosterToggle(MemoryMatchGroup, "Memory Match", allMemoryMatches)
addDispenserBoosterToggle(MemoryMatchGroup, "Extreme Memory Match", allMemoryMatches)
addDispenserBoosterToggle(MemoryMatchGroup, "Mega Memory Match", allMemoryMatches)
addDispenserBoosterToggle(MemoryMatchGroup, "Night Memory Match", allMemoryMatches)

MemoryMatchGroup:AddToggle("ToggleAllMemoryMatches", {
    Text = "Toggle All Memory Matches",
    Default = false,
    Tooltip = "Toggles all individual Memory Match options ON or OFF.",
    Callback = function(value)
        for _, toggle in ipairs(allMemoryMatches) do
            if toggle.Value ~= value then
                toggle:SetValue(value)
            end
        end
    end,
})


local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%",

	Text = "DPI Scale",

	Callback = function(Value)
		Value = Value:gsub("%%", "")
		local DPI = tonumber(Value)

		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
	:AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()

SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place")

SaveManager:BuildConfigSection(Tabs["UI Settings"])

ThemeManager:ApplyToTab(Tabs["UI Settings"])

SaveManager:LoadAutoloadConfig()
